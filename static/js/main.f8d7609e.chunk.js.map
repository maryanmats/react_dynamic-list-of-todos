{"version":3,"sources":["types/Filters.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","helpers.ts","index.tsx"],"names":["Filters","TodoList","todos","selectedTodoId","onTodoSelect","className","map","todo","isTodoSelected","id","completed","cn","title","type","onClick","TodoFilter","onFilterChange","onQueryChange","onQueryClear","query","onChange","Object","keys","key","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","Error","json","TodoModal","selectedTodo","onClose","useState","selectedTodoUser","setSelectedTodoUser","isLoading","setIsLoading","useEffect","userId","result","href","email","name","App","todosFromServer","setTodosFromServer","setSelectedTodo","All","filter","setFilter","setQuery","visibleTodos","toLowerCase","includes","trim","filterTodos","event","target","Completed","Active","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8d7609e.chunk.js","sourcesContent":["export enum Filters {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoId: number | null,\n  onTodoSelect: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  onTodoSelect,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const isTodoSelected = todo.id === selectedTodoId;\n\n          return (\n            <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onTodoSelect(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('far', {\n                      'fa-eye': !isTodoSelected,\n                      'fa-eye-slash': isTodoSelected,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\n// \"far fa-eye fa-eye-slash\"\n","import { Filters } from '../../types/Filters';\n\ntype Props = {\n  onFilterChange: (value: React.ChangeEvent<HTMLSelectElement>) => void,\n  onQueryChange: (value: React.ChangeEvent<HTMLInputElement>) => void,\n  onQueryClear: () => void,\n  query: string,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onFilterChange,\n  onQueryChange,\n  onQueryClear,\n  query,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={onFilterChange}\n        >\n          {(Object.keys(Filters) as Array<keyof typeof Filters>).map(key => (\n            <option\n              value={Filters[key]}\n              key={key}\n            >\n              {key}\n            </option>\n          ))}\n          {/* <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option> */}\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={onQueryChange}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={onQueryClear}\n          />\n        )}\n\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      if (!res.ok) {\n        throw new Error('Failed to load data from server!');\n      }\n\n      return res.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo;\n  onClose: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onClose,\n}) => {\n  const [selectedTodoUser, setSelectedTodoUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(result => {\n          setSelectedTodoUser(result || null);\n          setIsLoading(false);\n        });\n    }\n  }, [selectedTodo]);\n\n  const handleCloseClick = () => {\n    onClose();\n    setIsLoading(true);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseClick}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong> }\n\n              {' by '}\n\n              <a href={`mailto:${selectedTodoUser?.email}`}>\n                {selectedTodoUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { filterTodos } from './helpers';\nimport { Filters } from './types/Filters';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filter, setFilter] = useState<Filters>(Filters.All);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(result => {\n        setTodosFromServer(result);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const visibleTodos = filter !== Filters.All || query\n    ? filterTodos(todosFromServer, filter, query)\n    : todosFromServer;\n\n  const handleTodoSelect = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (event.target.value === Filters.All\n      || event.target.value === Filters.Completed\n      || event.target.value === Filters.Active) {\n      setFilter(event.target.value);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setSelectedTodo(null);\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleQueryClear = () => {\n    setQuery('');\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onFilterChange={handleFilterChange}\n                onQueryChange={handleQueryChange}\n                onQueryClear={handleQueryClear}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    onTodoSelect={handleTodoSelect}\n                    selectedTodoId={selectedTodo?.id || null}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onClose={handleCloseModal}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\n\nexport const filterTodos = (\n  todos: Todo[],\n  filter: string,\n  query: string,\n) => {\n  return todos.filter(todo => {\n    switch (filter) {\n      case 'completed':\n        return todo.completed;\n      case 'active':\n        return !todo.completed;\n      default:\n        return todo;\n    }\n  })\n    .filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase().trim())\n    ));\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}